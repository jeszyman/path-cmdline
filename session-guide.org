* Introduction: What is the command line and why should I care
** List of important terms (in practice, these are often all used interchangeably)
- Command line interface (CLI): a means of interacting with a computer where the user issues commands to the program in the form of successive lines of text
- Bash: a shell for Unix
- Shell: the means of accessing a computer's operating system services. Can be either CLI or graphical user interface (GUI)
- Terminal: Traditionally computer hardware used to enter data (teletype)
- Terminal emulator: Software program the behaves like the output of a hardware terminal

** Unix
Unix is family of multitasking, multiuser computer operating systems that derive from the original AT&T Unix developed in the 1970s. Linux and Apple's macOS are Unix-based operating systems. All common operating systems have some kind of command line interface (i.e. Windows Command Prompt), but the command line interface of Unix systems is unique in several ways:

- Often, such as when connecting to a remote server there is no graphical user interface available, and the command line interface is the only way to interact with the system.

- [[https://en.wikipedia.org/wiki/Unix_philosophy][Modularity]]-  Unix is a collection of small discrete parts, each of which performs a specific function. The building blocks can be assembled at the command line or in shell scripts to perform complicated tasks.

Try: 
: cd ~/path-cmdline | touch newfile.txt | echo "text" > new.file.txt 
  
- In Unix systems, text is a universal interface. This allows you to interact with the computer at a direct and basic level not possible in other operating systems. Settings files are an example of this very direct interaction through text. You can fundamentally change how your computer functions by altering a few lines in a text file. 

Try: 
: echo "alias givedate='date'" > ~/.bash_profile

By the standard of personal computer market share, Unix operating systems are in the minority. But Unix is the /lingua franca/ of several fields and applications associated with pathology and laboratory medicine including: 
- Shared and distributed resources such as
  - Servers and computing clusters- any pathology trainee can access Wash U's [[https://www.mir.wustl.edu/research/research-support-facilities/center-for-high-performance-computing-chpc][CPHC computing cluster]]
  - Virtual machines and containers such as Docker (e.g. https://sbu-bmi.github.io/quip_distro/)
- [[https://onlinelibrary.wiley.com/doi/abs/10.1002/9781118782392.ch1][Bioinformatics programs and software]]
- [[https://www.datascienceatthecommandline.com/index.html][Statistical computing and data science programs and software]]

The syntax of the Unix command line is also shared by many other computing tools. 

* Unix operating system structure and navigation
** Unix Directory Structure
  - [[file:images/20180501_081944_27006980.png]] http://www.rhyshaden.com/unix.htm
  - When you open a command line interface, you will always start at your home directory (e.g. folder). You can always find this personal directory using the tilda (~):

: cd ~

Which is the same as:

: cd /home/<YOUR USER NAME>
or on Mac
: cd /Users/<YOUR USER NAME>

Above the personal directories are system-level files and settings. You should mostly stay away from these for now.  

** Basic Unix Navigation Commands:
  | Command | Function                          | Example                        |
  |---------+-----------------------------------+--------------------------------|
  | pwd     | Print working directory           | pwd                            |
  | ls      | List i.e. show directory contents | ls ~/                          |
  | cd      | Change directory                  | cd ../                         |
  | mkdir   | Make directory                    | mkdir new-dir                  |
  | cp      | Copy                              | cp ~/move.txt ~/new-dir        |
  | rm      | Remove                            | rm oldfile.txt                 |
  | rmdir   | Remove directory                  | Be Careful!                    |
  | ln      | Make links between files          | ln -s ~/data/report1 ~/report1 |
  | chmod   | Change directory permissions      | chmod 777 file.txt             |
  |---------+-----------------------------------+--------------------------------|
  | *       | Wildcard                          | ls *.txt                       |
  | >       | Redirect output                   | head file.txt > top.txt        |
  | \vert   | Pipe- run commands in succession  | history \vert grep "rm"        |

- Command Options
The basic structure of Unix commands is [command] [options]. Options are command modifiers which give additional instructions about what you want a command to do. Command options are found in the tool's manual page (=man=). =ls= is a tool with many commonly used options. Try:

: cd ~/path-cmdline
: ls -tr1
 
- Symbolic links
These are similar to the alias function on MacOS or the shortcut function in Windows. For most modern Unix tools, symbolic links function identical to the real location of a file. You can create and use entire secondary directory structures with symbolic links. Try: 

: ln -s ~/path-cmdline/path-reports/report4.txt ~/report4.txt
: less report4.txt

- Directory Permissions
Try:
: ls -l 

Each directory and file has a prefix of 10 letters such as: 

: dr--r--r--
or
: drwxrwxrwx 

The meaning of each letter: 
[[file:images/20180501_141801_27006vGE.png]]
From http://linuxcommand.org/lc3_lts0090.php
 
We change permissions for files and directories with the =chmod= command. To allow the owner (you) but not group members or other users to read and write a file:

: chmod 700 <FILE>

Check with 

: ls -l 

Directory permissions are commonly a concern for executing instructions in a file such as a shell script like we will make later. If your shell script won't run, commonly the execute permission needs to be set:  

: chmod -x <FILE>.sh

- Getting help with Unix navigation
  - Online, often stack exchange sites are the best resource. 
  - Manual pages- each unix command is a tool, and each tool has a manual page which can be accessed with
* Manipulating text with command line utilities 
- Example pathology reports from https://training.seer.cancer.gov/abstracting/procedures/pathological/histologic/operative/example/
- Commands for Manipulating Text
  | Command | Function                     | Example                 |
  |---------+------------------------------+-------------------------|
  | wc      | Counts words                 | wc -l file.txt          |
  | grep    | Finds patterns in text files | grep -i "word" file.txt |
  | awk     | Tool for tabular data        | awk ' {print $1,$3} '   |
  | sed     | Advanced tool for text       | sed '/./!d' file.txt    |

Try: 

: cd ~/path-cmdline/path-reports
: grep -i "carcinoma" *.txt

Now try: 

: grep "[0-9]-[0-9]" *.txt

- Regular expressions
The [0-9] term in the last line is a very basic example of [[https://en.wikipedia.org/wiki/Regular_expression][regular expressions]], which are a common representations of text patterns across many computing environments. Unix and common programming languages share a similar regular expression syntax. In the above example, "[0-9]" signifies a string of numbers of any length. So the whole expression grep "[0-9]-[0-9]" *.txt returns lines where there is a pattern of numbers then a hypen, then more numbers. 

- Tabular Data (Example adapted from [[http://reasoniamhere.com/2013/09/16/awk-gtf-how-to-analyze-a-transcriptome-like-a-pro-part-1/][AWK GTF!]])
Unix has useful tools for processing data in tables. For text files, tabular data columns are defined by some delimiter like <TAB> or a comma. Let's try a few commands with a genomics file format called GTF and a Unix tool called awk: 

: cd ~/path-cmdline/genomics
: head transcriptome.gtf
: awk '$3 == "CDS"' transcriptome.gtf
: awk -F "\t" '$3 == "gene" { print $1 }' transcriptome.gtf


- Help with regular expressions
  - [[https://stackoverflow.com/questions/22937618/reference-what-does-this-regex-mean/22944075#22944075][stack overflow regex guide]]
  - https://regexr.com/
* Shell scripting- simple command line code

A script is a file containing a series of commands within a format that a computer program recognizes. Unix recognizes scripts as files that start with the line (called a shebang): 

: #!/bin/bash

and saved with the suffix .sh

Let's create a first shell script: 

: nano ~/path-cmdline/first.bash.sh

In the nano editor, write:  

: #!/bin/bash
: # A comment line
: echo "First Bash Script" 
: exit 

You see the first line is the shebang. The second is a comment- a note for us humans, not the computer. Comments begin with the pound (#) symbol. The third line is for the computer- =echo= directs the computer to print what comes next in quotations. End bash scripts with the line "exit". Press <CTRL> + x to exit the nano editor.  

Confirm that the file is executable by looking at permissions: 

: ls -a
: chmod -x first.bash.sh

And run the bash script: 

: bash first.bash.sh

* Servers, secure shell, and command line communication

In class exercise only. 

Once connected to the server, try

: echo "<WRITE A NOTE>" > group.txt
